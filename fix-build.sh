#!/bin/bash

# Script para corrigir problemas de build
set -e

echo "üîß Corrigindo problemas de build..."

# Verificar se todos os arquivos necess√°rios existem
echo "=== VERIFICANDO ARQUIVOS NECESS√ÅRIOS ==="

required_files=(
    "components/ui/button.tsx"
    "components/ui/card.tsx"
    "components/ui/input.tsx"
    "components/ui/badge.tsx"
    "components/ui/select.tsx"
    "components/ui/dialog.tsx"
    "components/ui/label.tsx"
    "components/ui/separator.tsx"
    "lib/utils.ts"
    "tsconfig.json"
    "tailwind.config.ts"
)

missing_files=()

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
        echo "‚ùå Arquivo faltando: $file"
    else
        echo "‚úÖ Arquivo encontrado: $file"
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo "‚ö†Ô∏è  Arquivos faltando detectados. Verifique se todos os componentes UI est√£o presentes."
    exit 1
fi

# Verificar tsconfig.json
echo "=== VERIFICANDO TSCONFIG.JSON ==="
if grep -q '"@/*"' tsconfig.json; then
    echo "‚úÖ Path mapping configurado corretamente"
else
    echo "‚ùå Path mapping n√£o encontrado no tsconfig.json"
    exit 1
fi

# Limpar cache e reinstalar depend√™ncias
echo "=== LIMPANDO CACHE ==="
rm -rf node_modules .next package-lock.json
npm install

# Tentar build local
echo "=== TESTANDO BUILD LOCAL ==="
npm run build

echo "‚úÖ Build local funcionando!"

# Agora tentar build Docker
echo "=== TESTANDO BUILD DOCKER ==="
docker build -t gerenciador-test .

echo "üéâ Todos os problemas foram corrigidos!"
